// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing enums (unchanged)
enum Role {
  STUDENT
  ADMIN
}

enum LearningPathStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

enum QuizStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  FREE
  PREMIUM
  ENTERPRISE
}

enum NotificationType {
  QUIZ_DUE
  PROGRESS_UPDATE
  BADGE_EARNED
  GROUP_INVITE
  BLOG_COMMENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum UserExperience {
  FRESHER
  INTERMEDIATE
  EXPERIENCED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum LearningStyle {
  VIDEO
  TEXT
  INTERACTIVE
}

enum AccessibilityMode {
  DEFAULT
  HIGH_CONTRAST
  SCREEN_READER
}

enum ResourceType {
  TEXT
  IFRAME
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EducationLevel {
  NONE
  BASIC
  HIGH_SCHOOL
  COLLEGE
}

// New Course model
model Course {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId   String?
  learningPath     LearningPath?  @relation(fields: [learningPathId], references: [id], onDelete: SetNull)
  courseName       String
  courseDescription String
  thumbnail        String?
  url              String
  level            DifficultyLevel
  rating           Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  progress         Progress[]     // Link to Progress for completion tracking

  @@index([userId])
  @@index([learningPathId])
}

// Updated User model (add lastCourseGeneratedAt)
model User {
  id                     String               @id @default(uuid())
  email                  String               @unique
  password               String?
  googleId               String?              @unique
  name                   String
  profileImageUrl        String?              @map("profile_image_url")
  role                   Role                 @default(STUDENT)
  educationLevel         EducationLevel       @default(COLLEGE)
  priorEducation         PriorEducation[]
  certifications         Certification[]
  extracurriculars       Extracurricular[]
  internships            Internship[]
  careerGoals            CareerGoal[]
  currentSemester        Int?                 @map("current_semester")
  previousSemester       PreviousSemester[]
  skills                 UserSkill[]
  major                  String?
  institution            String?
  userExperience         UserExperience       @default(FRESHER)
  preferredLearningStyle LearningStyle        @default(VIDEO)
  timeAvailabilityDays   Int?                 @map("time_availability_days")
  timeAvailabilityHours  Int?                 @map("time_availability_hours")
  subscriptionStatus     SubscriptionStatus   @default(FREE)
  trialStartDate         DateTime?            @map("trial_start_date")
  trialEndDate           DateTime?            @map("trial_end_date")
  lastCourseGeneratedAt  DateTime?            @map("last_course_generated_at") // New field for generation timestamp
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  learningPaths          LearningPath[]
  progress               Progress[]
  sessions               Session[]
  LearningAdjustments    LearningAdjustment[]
  quizzes                Quiz[]
  quizResponses          QuizResponse[]
  groups                 GroupMember[]
  challenge              Challenge[]
  posts                  BlogPost[]
  comments               BlogComment[]
  notifications          Notification[]
  followers              Follow[]             @relation("Follower")
  following              Follow[]             @relation("Following")
  attendance             Attendance[]
  aiQueries              AIQuery[]
  currentSubjects        CurrentSubject[]
  careerInterests        CareerInterest[]
  badges                 UserBadge[]
  leaderboardEntries     Leaderboard[]
  userSettings           UserSettings?
  projects               Project[]
  courses                Course[]             // New relation to Course model

  @@index([email])
}

// Existing models (unchanged, abbreviated for brevity)
model PreviousSemester {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semesterName  String
  gpa           Float?
  creditsEarned Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
}

model UserSkill {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillName   String
  proficiency String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, skillName])
  @@index([userId])
}

model PriorEducation {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  level         String
  institution   String
  yearCompleted Int
  grades        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
}

model Certification {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  issuer        String
  year          Int
  certificateId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
}

model Extracurricular {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  role      String
  duration  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Internship {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      String
  role         String
  startDate    DateTime
  endDate      DateTime?
  skillsGained String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@index([userId])
}

model CareerGoal {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal      String
  progress  Float    @default(0)
  deadline  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model Challenge {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge String
  reward    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model CurrentSubject {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  progress  Float      @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  resources Resource[]
  @@index([userId])
}

model CareerInterest {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  careerPathId String
  careerPath   CareerPath @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@unique([userId, careerPathId])
  @@index([userId])
}

model CareerPath {
  id               String             @id @default(uuid())
  name             String
  subfield         String?
  subscriptionTier SubscriptionStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  careerInterests  CareerInterest[]
  @@index([name, subfield])
}

model LearningPath {
  id          String               @id @default(uuid())
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  status      LearningPathStatus   @default(ACTIVE)
  startDate   DateTime             @default(now())
  endDate     DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  progress    Progress[]
  quizzes     Quiz[]
  attendance  Attendance[]
  resources   Resource[]
  projects    Project[]
  adjustments LearningAdjustment[]
  courses     Course[]             // New relation to Course model
  @@index([userId])
}

model Resource {
  id              String          @id @default(uuid())
  learningPathId  String
  learningPath    LearningPath    @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  subjectId       String?
  subject         CurrentSubject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  type            ResourceType
  difficulty      DifficultyLevel
  url             String?
  content         String?
  careerRelevance String?
  weekNumber      Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  @@index([learningPathId, subjectId])
}

model Project {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath   @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  title          String
  githubUrl      String?
  status         ProgressStatus @default(NOT_STARTED)
  deadline       DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@index([userId, learningPathId])
}

model Progress {
  id               String       @id @default(uuid())
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId   String
  learningPath     LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId         String?
  course           Course?      @relation(fields: [courseId], references: [id], onDelete: SetNull)
  timeSpentMinutes Int          @default(0)
  lastAccessed     DateTime     @default(now())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  @@index([userId, learningPathId])
  @@index([courseId])
}

model Attendance {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath     @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  status         AttendanceStatus
  date           DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  @@index([userId, learningPathId])
  @@index([date])
}

model LearningAdjustment {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  adjustmentType String
  reason         String?
  createdAt      DateTime     @default(now())
  @@index([userId, learningPathId])
}

model AIQuery {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  query     String
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Quiz {
  id             String         @id @default(uuid())
  learningPathId String
  learningPath   LearningPath   @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  weekNumber     Int
  status         QuizStatus     @default(PENDING)
  score          Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  questions      QuizQuestion[]
  responses      QuizResponse[]
  @@index([learningPathId, userId])
}

model QuizQuestion {
  id            String         @id @default(uuid())
  quizId        String
  quiz          Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText  String
  options       Json
  correctAnswer String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  responses     QuizResponse[]
  @@index([quizId])
}

model QuizResponse {
  id             String       @id @default(uuid())
  quizId         String
  quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionId     String
  question       QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  selectedAnswer String
  isCorrect      Boolean
  createdAt      DateTime     @default(now())
  @@index([quizId, userId, questionId])
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  @@index([name])
}

model GroupMember {
  id       String   @id @default(uuid())
  groupId  String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())
  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  @@index([userId])
}

model BlogPost {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  BlogComment[]
  @@index([userId])
}

model BlogComment {
  id        String   @id @default(uuid())
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([postId])
  @@index([userId])
}

model Leaderboard {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Float
  rank      Int
  period    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId, period])
}

model UserBadge {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeName   String
  description String?
  earnedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, badgeName])
  @@index([userId])
}

model UserSettings {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  language          String            @default("en")
  accessibilityMode AccessibilityMode @default(DEFAULT)
  notificationPrefs Json              @default("{}")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  @@index([userId])
}
