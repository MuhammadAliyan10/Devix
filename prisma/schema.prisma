// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActivityType {
  READING
  VIDEO
  ASSIGNMENT
}

enum UserStatus {
  STUDENT
  GRADUATE
  WORKER
}

enum UserExperience {
  FRESHER
  EXPERIENCED
  INTERN
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

enum LearningStyle {
  VIDEO
  TEXT
  INTERACTIVE
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String
  phone           String?
  dateOfBirth     DateTime?
  avatar          String?
  currentSemester Int?            // Current semester (e.g., 4)
  degree          String?         // e.g., "Bachelor of Science"
  major           String?         // e.g., "Computer Science"
  institution     String?         // Name of university/college
  about           String?
  skills          String[]        // e.g., ["Python", "JavaScript"]
  interests       String[]        // e.g., ["Web Development", "AI"]
  subscription    SubscriptionPlan @default(FREE)
  userStatus      UserStatus      @default(STUDENT)
  userExperience  UserExperience  @default(FRESHER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  progress        Progress[]
  quizAttempts    QuizAttempt[]
  groups          GroupMember[]
  blogs           Blog[]
  messages        Message[]
  settings        Settings?
  comments        Comment[]
  previousSemesters PreviousSemester[]
  priorEducations PriorEducation[]
  certifications  Certification[]
  extracurriculars Extracurricular[]
  internships     Internship[]
  futurePlans     FuturePlan?
}

model Course {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  modules     Module[]
  progress    Progress[]
}

model Module {
  id          String    @id @default(uuid())
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  order       Int
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activities  Activity[]
  quizzes     Quiz[]
}

model Activity {
  id          String       @id @default(uuid())
  moduleId    String
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title       String
  description String?
  type        ActivityType
  content     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  progress    Progress[]
}

model Progress {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  activityId  String?
  activity    Activity?      @relation(fields: [activityId], references: [id], onDelete: SetNull)
  status      ProgressStatus @default(NOT_STARTED)
  progress    Int?           // Percentage completed (0-100)
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Quiz {
  id          String        @id @default(uuid())
  moduleId    String
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title       String
  questions   Json          // JSON for questions (e.g., [{ question: "", options: [], correct: "" }])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  attempts    QuizAttempt[]
}

model QuizAttempt {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Int
  answers     Json      // JSON for user answers (e.g., [{ questionId: "", answer: "" }])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  isPremium   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  messages    Message[]
}

model GroupMember {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())
}

model Blog {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  image       String?
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id          String   @id @default(uuid())
  blogId      String
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId     String?
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  content     String
  fileUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id                String       @id @default(uuid())
  userId            String       @unique
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme             String       @default("light") // "light" or "dark"
  focusMode         Boolean      @default(false)
  notifications     Boolean      @default(true)
  defaultResourceType LearningStyle? // e.g., "VIDEO", "TEXT", "INTERACTIVE"
  twoFactorEnabled  Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model PreviousSemester {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester    Int
  year        Int
  gpa         Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subjects    SemesterSubject[]
}

model SemesterSubject {
  id          String   @id @default(uuid())
  semesterId  String
  semester    PreviousSemester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  name        String
  grade       String?
  status      String   // e.g., "completed", "incomplete", "missed"
  resourceIds String[] // IDs of resources completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PriorEducation {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  level       String   // e.g., "High School", "Associate Degree"
  institution String
  yearCompleted Int
  grades      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certification {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String   // e.g., "AWS Certified Developer"
  issuer        String   // e.g., "Amazon"
  year          Int
  certificateId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Extracurricular {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String   // e.g., "Coding Club"
  role        String   // e.g., "Member", "President"
  duration    String   // e.g., "2024-Present"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Internship {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     String
  role        String   // e.g., "Software Intern"
  startDate   DateTime
  endDate     DateTime?
  skillsGained String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FuturePlan {
  id                String       @id @default(uuid())
  userId            String       @unique
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  careerGoals       String[]     // e.g., ["Become a Software Engineer"]
  careerInterests   String[]     // e.g., ["Web Development", "AI"]
  preferredLearningStyle LearningStyle
  hoursPerWeek      Int
  preferredDays     String[]     // e.g., ["Monday", "Wednesday"]
  targetCompletionDate DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}
